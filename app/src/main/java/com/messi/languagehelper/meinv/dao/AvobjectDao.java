package com.messi.languagehelper.meinv.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AVOBJECT".
*/
public class AvobjectDao extends AbstractDao<Avobject, Long> {

    public static final String TABLENAME = "AVOBJECT";

    /**
     * Properties of entity Avobject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TableName = new Property(1, String.class, "tableName", false, "TABLE_NAME");
        public final static Property ItemId = new Property(2, String.class, "itemId", false, "ITEM_ID");
        public final static Property SerializedString = new Property(3, String.class, "serializedString", false, "SERIALIZED_STRING");
        public final static Property Key = new Property(4, String.class, "key", false, "KEY");
        public final static Property Collected = new Property(5, long.class, "collected", false, "COLLECTED");
        public final static Property History = new Property(6, long.class, "history", false, "HISTORY");
        public final static Property View = new Property(7, long.class, "view", false, "VIEW");
        public final static Property CeateTime = new Property(8, long.class, "ceateTime", false, "CEATE_TIME");
        public final static Property UpdateTime = new Property(9, long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property Backup1 = new Property(10, String.class, "backup1", false, "BACKUP1");
        public final static Property Backup2 = new Property(11, String.class, "backup2", false, "BACKUP2");
        public final static Property Backup3 = new Property(12, String.class, "backup3", false, "BACKUP3");
        public final static Property Backup4 = new Property(13, String.class, "backup4", false, "BACKUP4");
        public final static Property Backup5 = new Property(14, String.class, "backup5", false, "BACKUP5");
        public final static Property Backup6 = new Property(15, String.class, "backup6", false, "BACKUP6");
        public final static Property Backup7 = new Property(16, String.class, "backup7", false, "BACKUP7");
        public final static Property Backup8 = new Property(17, String.class, "backup8", false, "BACKUP8");
        public final static Property Backup9 = new Property(18, String.class, "backup9", false, "BACKUP9");
        public final static Property Backup10 = new Property(19, String.class, "backup10", false, "BACKUP10");
    }


    public AvobjectDao(DaoConfig config) {
        super(config);
    }
    
    public AvobjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AVOBJECT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TABLE_NAME\" TEXT," + // 1: tableName
                "\"ITEM_ID\" TEXT," + // 2: itemId
                "\"SERIALIZED_STRING\" TEXT," + // 3: serializedString
                "\"KEY\" TEXT," + // 4: key
                "\"COLLECTED\" INTEGER NOT NULL ," + // 5: collected
                "\"HISTORY\" INTEGER NOT NULL ," + // 6: history
                "\"VIEW\" INTEGER NOT NULL ," + // 7: view
                "\"CEATE_TIME\" INTEGER NOT NULL ," + // 8: ceateTime
                "\"UPDATE_TIME\" INTEGER NOT NULL ," + // 9: updateTime
                "\"BACKUP1\" TEXT," + // 10: backup1
                "\"BACKUP2\" TEXT," + // 11: backup2
                "\"BACKUP3\" TEXT," + // 12: backup3
                "\"BACKUP4\" TEXT," + // 13: backup4
                "\"BACKUP5\" TEXT," + // 14: backup5
                "\"BACKUP6\" TEXT," + // 15: backup6
                "\"BACKUP7\" TEXT," + // 16: backup7
                "\"BACKUP8\" TEXT," + // 17: backup8
                "\"BACKUP9\" TEXT," + // 18: backup9
                "\"BACKUP10\" TEXT);"); // 19: backup10
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AVOBJECT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Avobject entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String tableName = entity.getTableName();
        if (tableName != null) {
            stmt.bindString(2, tableName);
        }
 
        String itemId = entity.getItemId();
        if (itemId != null) {
            stmt.bindString(3, itemId);
        }
 
        String serializedString = entity.getSerializedString();
        if (serializedString != null) {
            stmt.bindString(4, serializedString);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(5, key);
        }
        stmt.bindLong(6, entity.getCollected());
        stmt.bindLong(7, entity.getHistory());
        stmt.bindLong(8, entity.getView());
        stmt.bindLong(9, entity.getCeateTime());
        stmt.bindLong(10, entity.getUpdateTime());
 
        String backup1 = entity.getBackup1();
        if (backup1 != null) {
            stmt.bindString(11, backup1);
        }
 
        String backup2 = entity.getBackup2();
        if (backup2 != null) {
            stmt.bindString(12, backup2);
        }
 
        String backup3 = entity.getBackup3();
        if (backup3 != null) {
            stmt.bindString(13, backup3);
        }
 
        String backup4 = entity.getBackup4();
        if (backup4 != null) {
            stmt.bindString(14, backup4);
        }
 
        String backup5 = entity.getBackup5();
        if (backup5 != null) {
            stmt.bindString(15, backup5);
        }
 
        String backup6 = entity.getBackup6();
        if (backup6 != null) {
            stmt.bindString(16, backup6);
        }
 
        String backup7 = entity.getBackup7();
        if (backup7 != null) {
            stmt.bindString(17, backup7);
        }
 
        String backup8 = entity.getBackup8();
        if (backup8 != null) {
            stmt.bindString(18, backup8);
        }
 
        String backup9 = entity.getBackup9();
        if (backup9 != null) {
            stmt.bindString(19, backup9);
        }
 
        String backup10 = entity.getBackup10();
        if (backup10 != null) {
            stmt.bindString(20, backup10);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Avobject entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String tableName = entity.getTableName();
        if (tableName != null) {
            stmt.bindString(2, tableName);
        }
 
        String itemId = entity.getItemId();
        if (itemId != null) {
            stmt.bindString(3, itemId);
        }
 
        String serializedString = entity.getSerializedString();
        if (serializedString != null) {
            stmt.bindString(4, serializedString);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(5, key);
        }
        stmt.bindLong(6, entity.getCollected());
        stmt.bindLong(7, entity.getHistory());
        stmt.bindLong(8, entity.getView());
        stmt.bindLong(9, entity.getCeateTime());
        stmt.bindLong(10, entity.getUpdateTime());
 
        String backup1 = entity.getBackup1();
        if (backup1 != null) {
            stmt.bindString(11, backup1);
        }
 
        String backup2 = entity.getBackup2();
        if (backup2 != null) {
            stmt.bindString(12, backup2);
        }
 
        String backup3 = entity.getBackup3();
        if (backup3 != null) {
            stmt.bindString(13, backup3);
        }
 
        String backup4 = entity.getBackup4();
        if (backup4 != null) {
            stmt.bindString(14, backup4);
        }
 
        String backup5 = entity.getBackup5();
        if (backup5 != null) {
            stmt.bindString(15, backup5);
        }
 
        String backup6 = entity.getBackup6();
        if (backup6 != null) {
            stmt.bindString(16, backup6);
        }
 
        String backup7 = entity.getBackup7();
        if (backup7 != null) {
            stmt.bindString(17, backup7);
        }
 
        String backup8 = entity.getBackup8();
        if (backup8 != null) {
            stmt.bindString(18, backup8);
        }
 
        String backup9 = entity.getBackup9();
        if (backup9 != null) {
            stmt.bindString(19, backup9);
        }
 
        String backup10 = entity.getBackup10();
        if (backup10 != null) {
            stmt.bindString(20, backup10);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Avobject readEntity(Cursor cursor, int offset) {
        Avobject entity = new Avobject( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tableName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // itemId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // serializedString
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // key
            cursor.getLong(offset + 5), // collected
            cursor.getLong(offset + 6), // history
            cursor.getLong(offset + 7), // view
            cursor.getLong(offset + 8), // ceateTime
            cursor.getLong(offset + 9), // updateTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // backup1
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // backup2
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // backup3
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // backup4
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // backup5
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // backup6
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // backup7
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // backup8
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // backup9
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // backup10
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Avobject entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTableName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setItemId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSerializedString(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setKey(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCollected(cursor.getLong(offset + 5));
        entity.setHistory(cursor.getLong(offset + 6));
        entity.setView(cursor.getLong(offset + 7));
        entity.setCeateTime(cursor.getLong(offset + 8));
        entity.setUpdateTime(cursor.getLong(offset + 9));
        entity.setBackup1(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBackup2(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBackup3(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setBackup4(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setBackup5(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setBackup6(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setBackup7(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setBackup8(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setBackup9(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setBackup10(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Avobject entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Avobject entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Avobject entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
